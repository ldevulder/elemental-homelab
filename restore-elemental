#!/bin/bash

# Load functions library
source $(realpath ${HOME}/bin)/elemental-functions

# Variable(s)
typeset BACKUP_FILE=$1
typeset RM_PWD=rancherpassword
typeset RM_KUBECONFIG=${HOME}/.kube/config
typeset RM_FLAGS

[[ -z "${BACKUP_FILE}" || ! -f "${BACKUP_FILE}" ]] \
  && quit "Error: a valid backup file should be provided!" 1

# Set the server variable if empty
[[ -z "${RM_SRV}" ]] && RM_SRV=$(hostname -f)

# Operator repository
if [[ -z "${ELEMENTAL_REPO}" ]]; then
  [[ "${ELEMENTAL_VERSION}" == "stable" ]] \
    && ELEMENTAL_REPO=oci://registry.suse.com/rancher \
    || ELEMENTAL_REPO=oci://registry.opensuse.org/isv/rancher/elemental/${ELEMENTAL_VERSION:-dev}/charts/rancher
fi

# NOTE: SKIP_* should be defined before calling the script if needed!

# Install K8s
(( SKIP_K8S )) || InstallK8s ${K8S_VERSION:=v1.28.10+k3s1}

# Configure Helm repos
(( SKIP_HELM )) || ConfigureHelm

# Install rancher-backup-operator
(( SKIP_BACKUP )) || InstallBackupOperator ${BACKUP_RESTORE_VERSION}

# Restore the previously saved backup
if ! (( SKIP_RESTORE )); then
  claimName=$(kubectl get pod \
                --namespace cattle-resources-system \
                -l app.kubernetes.io/name=rancher-backup \
		-o jsonpath={.items[*].spec.volumes[?\(@.name==\"pv-storage\"\)].persistentVolumeClaim.claimName})
  localPath=$(kubectl get pv \
                --namespace cattle-resources-system \
		-o jsonpath={.items[?\(@.spec.claimRef.name==\"${claimName}\"\)].spec.local.path})
  restoreYaml=$(sed "s/%BACKUP_FILE%/${BACKUP_FILE}/g" assets/restore.yaml)

  sudo cp ${BACKUP_FILE} ${localPath}
  echo "${restoreYaml}" | kubectl apply -f -

  # Waiting for restore to be done
  COUNT=0
  IS_RESTORED=1
  echo -n "Waiting for restoration"
  while (( IS_RESTORED && COUNT++ < 60 )); do
    echo -n "."
    kubectl logs \
      --namespace cattle-resources-system \
      -l app.kubernetes.io/name=rancher-backup 2>/dev/null | grep -q 'Done restoring'
    IS_RESTORED=$?
    sleep 5s
  done
  echo
  (( IS_RESTORED )) && quit "Error while restoring, see rancher-backup logs!" 1
fi

# Install certificate
(( SKIP_CERT )) || InstallCert

# Install Rancher Manager
if ! (( SKIP_RM )); then
  InstallRM ${RM_VERSION:-stable}

  # Get already generated local cluster kubeconfig
  GetLocalConfig
fi
